import unittest
from random import randint
from materials_commons.api import api


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestApiProjectRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.access_user = "test@test.mc"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        cls.project_name = raw_data['name']

    def test_get_top_directory_raw(self):
        results = api.directory_by_id(self.project_id, 'top', apikey=self.apikey)
        self.assertEqual(results['otype'], 'directory')
        self.assertEqual(results['name'], self.project_name)
        self.assertEqual(results['path'], self.project_name)
        for sub_directory in results['children']:
            self.assertEqual(sub_directory['path'], self.project_name + '/' + sub_directory['name'])

    def test_get_directory_by_id_raw(self):
        results = api.directory_by_id(self.project_id, 'top', apikey=self.apikey)
        self.assertEqual(results['name'], self.project_name)
        directory_id = results['id']
        results = api.directory_by_id(self.project_id, directory_id, apikey=self.apikey)
        self.assertEqual(results['otype'], 'directory')
        self.assertEqual(results['name'], self.project_name)
        self.assertEqual(results['path'], self.project_name)

    def test_create_subdirectory_raw(self):
        results = api.directory_by_id(self.project_id, 'top', apikey=self.apikey)
        self.assertEqual(results['name'], self.project_name)
        directory_id = results['id']
        subdirectory_list = [
            "/testA/test2",
            "/testA/test1",
            "/testB/testB2/testB3"
        ]
        results = api.directory_create_subdirectories_from_path_list(
            self.project_id, directory_id, subdirectory_list, apikey=self.apikey)
        all_dirs_dict = results['val']
        for input_item in subdirectory_list:
            path = self.project_name + input_item
            self.assertIn(path, all_dirs_dict.keys())
        for key in all_dirs_dict:
            subdirectory = all_dirs_dict[key]
            self.assertEqual(key, subdirectory['name'])
            self.assertTrue(key.startswith(self.project_name))
            self.assertEqual(subdirectory['owner'], self.user)

    def test_create_fetch_all_directories_on_path_raw(self):
        results = api.directory_by_id(self.project_id, 'top', apikey=self.apikey)
        self.assertEqual(results['name'], self.project_name)
        directory_id = results['id']
        path = "/TestC/TestC1/TestC2"
        results = api.create_fetch_all_directories_on_path(
            self.project_id, directory_id, path, apikey=self.apikey)
        all_dirs = results['dirs']
        self.assertEqual(3, len(all_dirs))
        self.assertEqual(self.project_name + "/TestC", all_dirs[0]['name'])
        self.assertEqual(self.project_name + "/TestC/TestC1", all_dirs[1]['name'])
        self.assertEqual(self.project_name + "/TestC/TestC1/TestC2", all_dirs[2]['name'])
        for directory in all_dirs:
            self.assertEqual(directory['owner'], self.user)

    def test_directory_rename_raw(self):
        results = api.directory_by_id(self.project_id, 'top', apikey=self.apikey)
        self.assertEqual(results['name'], self.project_name)
        directory_id = results['id']
        path = "/TestD/TestD1/TestD2"
        base = "/TestD/TestD1/"
        results = api.create_fetch_all_directories_on_path(
            self.project_id, directory_id, path, apikey=self.apikey)
        all_dirs = results['dirs']
        self.assertEqual(3, len(all_dirs))
        directory_id = all_dirs[2]['id']
        new_name = "UPDATED-TestD2"
        new_path = self.project_name + base + new_name
        directory = api.directory_rename(self.project_id, directory_id, new_name, apikey=self.apikey)
        self.assertEqual(new_name, directory['name'])
        self.assertEqual(new_path, directory['path'])

    def test_directory_move_raw(self):
        results = api.directory_by_id(self.project_id, 'top', apikey=self.apikey)
        self.assertEqual(results['name'], self.project_name)
        top_directory_id = results['id']
        path = "/TestF/TestF1/TestF2"
        results = api.create_fetch_all_directories_on_path(
            self.project_id, top_directory_id, path, apikey=self.apikey)
        all_dirs = results['dirs']
        self.assertEqual(3, len(all_dirs))
        directory_id = all_dirs[2]['id']
        target_directory_id = all_dirs[0]['id']
        path = self.project_name + "/TestF/TestF2"
        results = api.directory_move(
            self.project_id, directory_id, target_directory_id, apikey=self.apikey)
        self.assertEqual(directory_id, results['id'])
        self.assertEqual(path, results['path'])
        directory0 = api.directory_by_id(self.project_id, target_directory_id, apikey=self.apikey)
        self.assertEqual(len(directory0['children']), 2)
        self.assertIn(directory_id, [child['id'] for child in directory0['children']])
        self.assertIn(path, [child['path'] for child in directory0['children']])
