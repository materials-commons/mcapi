import unittest
import pytest
import tempfile
import filecmp
from os import remove
from os.path import exists, isfile
from random import randint
from materials_commons.api import create_project
from .apikey_helper_utils import _setup_test_filepath1, _get_local_test_dir_path, _get_file_size
from .apikey_helper_utils import _get_filename_from_path, _get_absolute_path_from_path
from .apikey_helper_utils import FileTestException


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestFileDownload(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        cls.top_directory = cls.project.get_top_directory()

        try:
            cls.file_path = _setup_test_filepath1()
            cls.local_dir_path_for_tests = _get_local_test_dir_path()
            cls.project.local_path = cls.local_dir_path_for_tests
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

    def test_download_file_content(self):
        # first upload
        project = self.project
        directory = project.get_top_directory()
        filepath1 = _setup_test_filepath1()
        file_name = _get_filename_from_path(filepath1)
        input_path = _get_absolute_path_from_path(filepath1)
        byte_count = _get_file_size(input_path)
        test_file = project.add_file_using_directory(directory, file_name, input_path)
        self.assertIsNotNone(test_file)
        self.assertEqual(test_file.size, byte_count)

        download_file_path = tempfile.gettempdir() + "/" + test_file.name
        if exists(download_file_path):
            remove(download_file_path)

        print("")
        print(download_file_path)
        filepath = test_file.download_file_content(download_file_path)

        self.assertTrue(exists(filepath))
        self.assertTrue(isfile(filepath))
        self.assertTrue(filecmp.cmp(input_path, filepath))
