import unittest
from random import randint
from materials_commons.api import create_project, create_experiment_metadata
from materials_commons.api import get_experiment_metadata_by_experiment_id, get_experiment_metadata_by_id


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestExperimentMetadata(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestExperimentProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        experiment_name = fake_name("TestExperiment1-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(experiment_name, description)

    def test_create_experiment_metadata(self):
        # Note: top level function
        metadata_data = _make_reasonable_metadata()
        metadata = create_experiment_metadata(self.experiment.id, metadata_data, apikey=self.apikey)
        self.assertEqual(self.user, metadata.owner)

    def test_update_experiment_metadata(self):
        metadata_data = _make_reasonable_metadata()
        metadata = create_experiment_metadata(self.experiment.id, metadata_data, apikey=self.apikey)

        old_value = metadata.json["input_data_dir_path"]
        new_value = old_value + '/extra'
        self.assertTrue(metadata.json["input_data_dir_path"] == old_value)
        self.assertFalse(metadata.json["input_data_dir_path"] == new_value)

        metadata_data["input_data_dir_path"] = new_value
        metadata = metadata.update(metadata_data)
        self.assertEqual(new_value, metadata.json["input_data_dir_path"])

    def test_get_experiment_metadata_by_experiment_id(self):
        # Note: top level functions
        metadata_data = _make_reasonable_metadata()
        metadata = create_experiment_metadata(self.experiment.id, metadata_data, apikey=self.apikey)
        self.assertEqual(self.user, metadata.owner)

        metadata_by_experiment_id = get_experiment_metadata_by_experiment_id(self.experiment.id, apikey=self.apikey)
        self.assertEqual(self.user, metadata_by_experiment_id.owner)
        self.assertEqual(metadata.id, metadata_by_experiment_id.id)

    def test_get_experiment_metadata_by_id(self):
        # Note: top level functions
        metadata_data = _make_reasonable_metadata()
        metadata = create_experiment_metadata(self.experiment.id, metadata_data, apikey=self.apikey)
        self.assertEqual(self.user, metadata.owner)

        metadata_by_id = get_experiment_metadata_by_id(metadata.id, apikey=self.apikey)
        self.assertEqual(self.user, metadata_by_id.owner)
        self.assertEqual(metadata.experiment_id, metadata_by_id.experiment_id)

    def test_delete_experiment_metadata(self):
        metadata_data = _make_reasonable_metadata()
        metadata = create_experiment_metadata(self.experiment.id, metadata_data, apikey=self.apikey)
        self.assertEqual(self.user, metadata.owner)

        metadata_by_id = get_experiment_metadata_by_id(metadata.id, apikey=self.apikey)
        self.assertEqual(self.user, metadata_by_id.owner)
        self.assertEqual(metadata.experiment_id, metadata_by_id.experiment_id)

        metadata.delete()
        metadata_by_id = get_experiment_metadata_by_id(metadata.id, apikey=self.apikey)
        self.assertIsNone(metadata_by_id)

def _make_reasonable_metadata():
    return {
        "time_stamp": "Thu Feb  8 08:36:34 2018",
        "process_metadata": [
            {
                "id": "8da4f353-9076-4796-a51e-7c521772ae51",
                "name": "Create Samples",
                "template": "global_Create Samples",
                "start_row": 5,
                "end_row": 6,
                "start_col": 1,
                "end_col": 2
            },
            {
                "id": "22b1aaaf-2076-44e1-9ace-8d7fe9791c94",
                "name": "Create Samples",
                "template": "global_Create Samples",
                "start_row": 6,
                "end_row": 7,
                "start_col": 1,
                "end_col": 2
            },
            {
                "id": "7f2fb980-809c-4486-95e3-8ec452bfa751",
                "name": "Create Samples",
                "template": "global_Create Samples",
                "start_row": 7,
                "end_row": 8,
                "start_col": 1,
                "end_col": 2
            },
            {
                "id": "92417fe4-1aa4-4494-8967-13f8cc4f6025",
                "name": "Create Samples",
                "template": "global_Create Samples",
                "start_row": 8,
                "end_row": 9,
                "start_col": 1,
                "end_col": 2
            },
            {
                "id": "d7c0f921-6695-4e17-b02e-f5eb37345677",
                "name": "Preparation 1",
                "template": "global_Heat Treatment",
                "start_row": 5,
                "end_row": 6,
                "start_col": 2,
                "end_col": 5
            },
            {
                "id": "566ac438-c2a0-4b31-a9aa-c59c548082df",
                "name": "Preparation 1",
                "template": "global_Heat Treatment",
                "start_row": 6,
                "end_row": 7,
                "start_col": 2,
                "end_col": 5
            },
            {
                "id": "687d94be-5fd7-4fd0-97d7-e61275897131",
                "name": "Preparation 1",
                "template": "global_Heat Treatment",
                "start_row": 7,
                "end_row": 8,
                "start_col": 2,
                "end_col": 5
            },
            {
                "id": "9335c438-650a-4de6-afc0-02e2f0048965",
                "name": "Preparation 1",
                "template": "global_Heat Treatment",
                "start_row": 8,
                "end_row": 9,
                "start_col": 2,
                "end_col": 5
            }
        ],
        "input_excel_file_path": "/Users/weymouth/Desktop/test/short.xlsx",
        "input_data_dir_path": "/Users/weymouth/Desktop/test/data",
        "output_json_file_path": "/Users/weymouth/Desktop/test/metadata.json",
        "project_id": "8197c346-dfdf-4160-8fd1-677f0c8d2d0f",
        "experiment_id": "9fa0dc7e-c503-41a5-8f0b-e5884ec8ae0f",
        "header_row_end": 5,
        "data_row_start": 5,
        "data_row_end": 9,
        "data_col_start": 1,
        "data_col_end": 5,
        "start_attribute_row": 1,
        "sheet_headers": [
            [
                "PROJ: Generic Testing",
                "PROC: Create Samples",
                "PROC: Heat Treatment",
                None,
                None
            ],
            [
                "EXP: Test1",
                "SAMPLES",
                "PARAM",
                "PARAM",
                "FILES"
            ],
            [
                None,
                None,
                "Temperature (C)",
                "Time (h)",
                None
            ],
            [
                "NAME",
                None,
                "Preparation 1",
                None,
                None
            ],
            [
                "LABEL",
                "Sample Name",
                "Temp (\u00baC)",
                "Time (hr)",
                None
            ]
        ],
        "project": None,
        "experiment": None,
        "process_table": None
    }
