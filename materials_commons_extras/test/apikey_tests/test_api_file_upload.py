import unittest
from os import environ
from os import path as os_path
from random import randint
# noinspection PyCompatibility
from pathlib import Path
from materials_commons.api import api
from .apikey_helper_utils import _setup_test_filepath1, _get_file_size


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestApiFileUploadRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        results = api.directory_by_id(cls.project_id, 'top', apikey=cls.apikey)
        cls.directory_id = results['id']

    def test_file_upload_raw(self):
        self.assertTrue('TEST_DATA_DIR' in environ)
        filepath = _setup_test_filepath1()
        self.assertTrue(os_path.isfile(filepath))
        path = Path(filepath)
        file_name = path.parts[-1]
        input_path = str(path.absolute())
        byte_count = _get_file_size(input_path)
        file_raw = api.file_upload(self.project_id, self.directory_id, file_name, input_path, apikey=self.apikey)
        self.assertEqual('datafile', file_raw['otype'])
        self.assertEqual(byte_count, file_raw['size'])
        self.assertEqual(byte_count, file_raw['uploaded'])
        self.assertEqual(self.user, file_raw['owner'])
