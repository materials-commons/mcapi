import unittest
import pytest
import os
from random import randint
from materials_commons.api import create_project, get_all_templates
from .apikey_helper_utils import _setup_test_filepath1, _get_local_test_dir_path
from .apikey_helper_utils import _get_absolute_path_from_path
from .apikey_helper_utils import make_template_table, find_template_id_from_match
from .apikey_helper_utils import FileTestException


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestFileBasic(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        cls.top_directory = cls.project.get_top_directory()

        try:
            cls.file_path = _setup_test_filepath1()
            cls.local_dir_path_for_tests = _get_local_test_dir_path()
            cls.project.local_path = cls.local_dir_path_for_tests
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

        filepath1 = _setup_test_filepath1()
        input_path = _get_absolute_path_from_path(filepath1)
        cls.directory = cls.project.add_directory("/A")

        cls.file_name1 = "testFile1.jpg"
        cls.test_file1 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name1, input_path)

        cls.file_name2 = "testFile2.jpg"
        cls.test_file2 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name2, input_path)

        cls.file_name3 = "testFile3.jpg"
        cls.test_file3 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name3, input_path)

    def test_file_rename(self):
        old_name = self.file_name1
        self.assertEqual(old_name, self.test_file1.name)
        new_name = "Rename" + old_name
        file = self.test_file1.rename(new_name)
        self.assertEqual(new_name, file.name)

    def test_file_move(self):
        file_id = self.test_file2.id

        children = self.top_directory.get_children()
        found = None
        for item in children:
            if item.id == file_id:
                found = item
        self.assertIsNotNone(found)

        moved_file = self.test_file2.move(self.directory)
        self.assertEqual(file_id, moved_file.id)

        children = self.top_directory.get_children()
        found = None
        for item in children:
            if item.id == file_id:
                found = item
        self.assertIsNone(found)

        children = self.directory.get_children()
        found = None
        for item in children:
            if item.id == file_id:
                found = item
        self.assertIsNotNone(found)

    def test_file_local_path(self):
        # note, a known bug, this only works in the context of creating a file using local_path
        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        local_path_file = self.project.add_file_by_local_path(_setup_test_filepath1())
        local_path_expected = os.path.dirname(local_path) + "/" + self.project.name + "/fractal.jpg"
        self.assertEqual(local_path_expected, local_path_file.local_path())


class TestProjectFile(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        cls.top_directory = cls.project.get_top_directory()

        try:
            cls.file_path = _setup_test_filepath1()
            cls.local_dir_path_for_tests = _get_local_test_dir_path()
            cls.project.local_path = cls.local_dir_path_for_tests
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

        filepath1 = _setup_test_filepath1()
        input_path = _get_absolute_path_from_path(filepath1)
        cls.directory = cls.project.add_directory("/A")

        cls.file_name1 = "testFile1.jpg"
        cls.test_file1 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name1, input_path)

        cls.file_name2 = "testFile2.jpg"
        cls.test_file2 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name2, input_path)

        cls.file_name3 = "testFile3.jpg"
        cls.test_file3 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name3, input_path)

    def test_project_file_add_file_using_directory(self):
        input_path = _get_absolute_path_from_path(_setup_test_filepath1())
        file_name = "testFile-test-file-user-directory.jpg"
        file = self.project.add_file_using_directory(self.top_directory, file_name, input_path)
        self.assertEqual(file_name, file.name)
        self.assertEqual(self.user, file.owner)

    def test_project_file_add_file_by_local_path(self):
        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        file = self.project.add_file_by_local_path(_setup_test_filepath1())
        self.assertEqual(self.user, file.owner)

    def test_project_file_get_by_local_path(self):
        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        file = self.project.add_file_by_local_path(_setup_test_filepath1())
        fetched = self.project.get_by_local_path(_setup_test_filepath1())
        self.assertEqual(file.id, fetched.id)

    def test_project_file_file_exists_by_local_path(self):
        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        self.project.add_file_by_local_path(_setup_test_filepath1())
        flag = self.project.file_exists_by_local_path(_setup_test_filepath1())
        self.assertTrue(flag, "test_project_file_file_exists_by_local_path: file_exists, no checksum")

        flag = self.project.file_exists_by_local_path(_setup_test_filepath1(), checksum=True)
        self.assertTrue(flag, "test_project_file_file_exists_by_local_path: file_exists, checksum")


class TestProjectFileAddTree(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        cls.top_directory = cls.project.get_top_directory()

    def test_project_file_add_directory_tree_by_local_path(self):
        # def add_directory_tree_by_local_path(self, local_path, verbose=False, limit=50):
        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        test_dir = 'test_upload_dir'
        test_upload_path = os.path.join(local_path, test_dir)
        ret = self.project.add_directory_tree_by_local_path(test_upload_path)
        file_list = ret[0]
        for file in file_list:
            self.assertEqual(self.user, file.owner)


class TestProcessFileAllFiles(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.another_user = "test@test.mc"
        cls.another_apikey = "totally-bogus"
        cls.templates = make_template_table(get_all_templates(apikey=cls.apikey))
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        experiment_name = fake_name("TestApikeyExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(experiment_name, description)
        cls.ht_template = find_template_id_from_match(cls.templates, "Heat Treatment")
        cls.ht_process = cls.experiment.create_process_from_template(cls.ht_template)

    def test_file_process_all_files(self):
        self.assertEqual(self.user, self.ht_process.owner)
        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        test_dir = 'test_upload_dir'
        test_upload_path = os.path.join(local_path, test_dir)
        ret = self.project.add_directory_tree_by_local_path(test_upload_path)
        file_list = ret[0]
        self.ht_process.add_files(file_list)
        returned_files = self.ht_process.get_all_files()
        originals_ids = [file.id for file in file_list]
        returned_ids = [file.id for file in returned_files]
        for file in file_list:
            self.assertEqual(self.user, file.owner)
            self.assertIn(file.id, returned_ids)
        for file in returned_files:
            self.assertEqual(self.user, file.owner)
            self.assertIn(file.id, originals_ids)


class TestFileDirectory(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        cls.top_directory = cls.project.get_top_directory()

        try:
            cls.file_path = _setup_test_filepath1()
            cls.local_dir_path_for_tests = _get_local_test_dir_path()
            cls.project.local_path = cls.local_dir_path_for_tests
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

        filepath1 = _setup_test_filepath1()
        cls.file_input_path = _get_absolute_path_from_path(filepath1)

    def test_file_directory_add_file(self):
        filepath1 = _setup_test_filepath1()
        file_input_path = _get_absolute_path_from_path(filepath1)
        directory = self.project.add_directory("/A")
        file = directory.add_file("test.jpg", file_input_path)
        self.assertEqual(self.user, file.owner)
        self.assertEqual("test.jpg", file.name)

    def test_file_directory_add_directory_tree(self):
        directory = self.project.add_directory("/B")

        local_path = _get_local_test_dir_path()
        self.project.local_path = local_path
        test_dir = 'test_upload_dir'
        test_upload_path = os.path.join(local_path)
        ret = directory.add_directory_tree(test_dir, test_upload_path)
        file_list = ret[0]
        for file in file_list:
            self.assertEqual(self.user, file.owner)
