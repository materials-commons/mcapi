import unittest
from random import randint
from materials_commons.api import api
from materials_commons.api import Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestApiSampleRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.access_user = "test@test.mc"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        experiment_name = fake_name("TestExperiment-")
        experiment_description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(
            cls.project_id, experiment_name, experiment_description, apikey=cls.apikey)
        cls.experiment_id = experiment_raw['id']
        cls.template_id = Template.create
        raw_process = api.create_process_from_template(
            cls.project_id, cls.experiment_id, cls.template_id, apikey=cls.apikey)
        cls.create_process_id = raw_process['id']

    def test_create_samples_in_project_raw(self):
        sample_name = "TestSample1"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])

    def test_add_samples_to_experiment_raw(self):
        sample_name = "TestSample2"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        results = api.add_samples_to_experiment(
            self.project_id, self.experiment_id, [sample_raw['id']], apikey=self.apikey)
        self.assertEqual(self.experiment_id, results[0]['experiment_id'])

    def test_get_sample_by_id_raw(self):
        sample_name = "TestSample3"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        sample_id = sample_raw['id']
        results = api.add_samples_to_experiment(
            self.project_id, self.experiment_id, [sample_id], apikey=self.apikey)
        self.assertEqual(self.experiment_id, results[0]['experiment_id'])
        results = api.get_sample_by_id(self.project_id, sample_id, apikey=self.apikey)
        self.assertEqual(self.user, results['owner'])

    def test_get_project_sample_by_id_raw(self):
        sample_name = "TestSample4"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        sample_id = sample_raw['id']
        results = api.add_samples_to_experiment(
            self.project_id, self.experiment_id, [sample_id], apikey=self.apikey)
        self.assertEqual(self.experiment_id, results[0]['experiment_id'])
        results = api.get_project_sample_by_id(self.project_id, sample_id, apikey=self.apikey)
        self.assertEqual(self.user, results['owner'])

    def test_get_project_samples_raw(self):
        # at least one sample
        sample_name = "TestSample5"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        sample_id = sample_raw['id']
        results = api.add_samples_to_experiment(
            self.project_id, self.experiment_id, [sample_id], apikey=self.apikey)
        self.assertEqual(self.experiment_id, results[0]['experiment_id'])

        sample_list = api.get_project_samples(self.project_id, apikey=self.apikey)
        found = None
        for sample in sample_list:
            if sample_id == sample['id']:
                found = sample
        self.assertIsNotNone(found)

    def test_fetch_experiment_samples_raw(self):
        # at least one sample
        sample_name = "TestSample5"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        sample_id = sample_raw['id']
        results = api.add_samples_to_experiment(
            self.project_id, self.experiment_id, [sample_id], apikey=self.apikey)
        self.assertEqual(self.experiment_id, results[0]['experiment_id'])

        sample_list = api.fetch_experiment_samples(
            self.project_id, self.experiment_id, apikey=self.apikey)
        found = None
        for sample in sample_list:
            if sample_id == sample['id']:
                found = sample
        self.assertIsNotNone(found)

    def test_fetch_sample_details_raw(self):
        # at least one sample
        sample_name = "TestSample6"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        sample_id = sample_raw['id']

        results = api.fetch_sample_details(self.project_id, sample_id, apikey=self.apikey)
        self.assertEqual(sample_name, results['name'])
        self.assertEqual(sample_id, results['id'])

    def test_delete_sample_created_by_process_raw(self):
        # at least one sample
        sample_name = "TestSample5"
        results = api.create_samples_in_project(
            self.project_id, self.create_process_id, [sample_name], apikey=self.apikey)
        sample_list_raw = results['samples']
        self.assertEqual(len(sample_list_raw), 1)
        sample_raw = sample_list_raw[0]
        self.assertEqual(sample_name, sample_raw['name'])
        sample_id = sample_raw['id']
        property_set_id = sample_raw['property_set_id']
        results = api.add_samples_to_experiment(
            self.project_id, self.experiment_id, [sample_id], apikey=self.apikey)
        self.assertEqual(self.experiment_id, results[0]['experiment_id'])

        sample_list = api.get_project_samples(self.project_id, apikey=self.apikey)
        found = None
        for sample in sample_list:
            if sample_id == sample['id']:
                found = sample
        self.assertIsNotNone(found)

        results = api.delete_sample_created_by_process(
            self.project_id, self.create_process_id, sample_id, property_set_id, apikey=self.apikey)
        self.assertIsNotNone(results)

        sample_list = api.get_project_samples(self.project_id, apikey=self.apikey)
        found = None
        for sample in sample_list:
            if sample_id == sample['id']:
                found = sample
        self.assertIsNone(found)

    def test_add_samples_to_process_raw(self):
        results = api.get_project_samples(self.project_id, apikey=self.apikey)
        sample_list = results[0]['versions']
        pair_list = [{'sample_id': s['sample_id'], 'property_set_id': s['property_set_id']} for s in sample_list]
        process_record_raw = api.add_samples_to_process(
            self.project_id, self.experiment_id, self.create_process_id,
            self.template_id, pair_list, apikey=self.apikey)
        self.assertEqual("process", process_record_raw['otype'])
        self.assertEqual(self.user, process_record_raw['owner'])
        sample_list = process_record_raw['output_samples']
        self.assertEqual(1, len(sample_list))
        sample_record_raw = sample_list[0]
        self.assertEqual("sample", sample_record_raw['otype'])
        self.assertEqual(self.user, sample_record_raw['owner'])
        self.assertEqual(self.create_process_id, sample_record_raw['process_id'])
