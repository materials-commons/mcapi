import unittest
import pytest
import tempfile
import filecmp
from os import remove
from os.path import exists, isfile
from random import randint
from materials_commons.api import api
from .apikey_helper_utils import _upload_generic_test_file, _original_generic_test_file_path
from .apikey_helper_utils import FileTestException


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestApiFileDownloadRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        try:
            file_record_raw = _upload_generic_test_file(cls.project_id, cls.apikey)
            cls.file_id = file_record_raw['id']
            cls.file_name = file_record_raw['name']
            cls.original_file_path = _original_generic_test_file_path()
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

    def test_file_download_raw(self):
        download_file_path = tempfile.gettempdir() + "/" + self.file_name
        if exists(download_file_path):
            remove(download_file_path)
        path = api.file_download(self.project_id, self.file_id, download_file_path, apikey=self.apikey)
        self.assertTrue(exists(path))
        self.assertTrue(isfile(path))
        self.assertTrue(filecmp.cmp(self.original_file_path, path))
