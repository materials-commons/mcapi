import unittest
import pytest
from random import randint
from materials_commons.api import create_project, get_all_templates, Template
from .apikey_helper_utils import make_template_table, find_template_id_from_match


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestProcessSampleMeasurement(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.another_user = "test@test.mc"
        cls.another_apikey = "totally-bogus"
        cls.templates = make_template_table(get_all_templates(apikey=cls.apikey))
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        experiment_name = fake_name("TestApikeyExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(experiment_name, description)
        cls.create_process = cls.experiment.create_process_from_template(Template.create)
        ht_template = find_template_id_from_match(cls.templates, "Heat Treatment")
        cls.ht_process = cls.experiment.create_process_from_template(ht_template)

        cls.sample_names1 = ["sample1a"]
        cls.samples1 = cls.create_process.create_samples(cls.sample_names1)

    def test_set_integer_measurement(self):
        attribute = "spacing"
        value = 5
        name = "Gap Spacing"
        otype = "integer"

        process = self.create_process
        process = process.add_integer_measurement(attribute, value, name=name)
        sample_out = process.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        selected_property = table[name]
        self.assertEqual(len(selected_property.best_measure), 1)
        measurement_out = selected_property.best_measure[0]
        self.assertEqual(measurement_out.name, name)
        self.assertEqual(measurement_out.attribute, attribute)
        self.assertEqual(measurement_out.otype, otype)
        self.assertEqual(measurement_out.unit, "")
        self.assertEqual(measurement_out.value, value)

    # noinspection SpellCheckingInspection,SpellCheckingInspection
    def test_set_string_measurement(self):
        attribute = "label"
        value = "booloo ball"
        name = "Gingle Snit"
        otype = "string"

        process = self.create_process
        process = process.add_string_measurement(attribute, value, name=name)
        sample_out = process.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        selected_property = table[name]
        self.assertEqual(len(selected_property.best_measure), 1)
        measurement_out = selected_property.best_measure[0]
        self.assertEqual(measurement_out.name, name)
        self.assertEqual(measurement_out.attribute, attribute)
        self.assertEqual(measurement_out.otype, otype)
        self.assertEqual(measurement_out.unit, "")
        self.assertEqual(measurement_out.value, value)

    def test_set_boolean_measurement(self):
        attribute = "flag"
        value = True
        name = "Shift"
        otype = "boolean"

        process = self.create_process
        process = process.add_boolean_measurement(attribute, value, name=name)
        sample_out = process.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        selected_property = table[name]
        self.assertEqual(len(selected_property.best_measure), 1)
        measurement_out = selected_property.best_measure[0]
        self.assertEqual(measurement_out.name, name)
        self.assertEqual(measurement_out.attribute, attribute)
        self.assertEqual(measurement_out.otype, otype)
        self.assertEqual(measurement_out.unit, "")
        self.assertEqual(measurement_out.value, value)

    def test_set_number_measurement(self):
        attribute = "scale"
        value = 7
        name = "Scaling Factor"
        otype = "number"

        process = self.create_process
        process = process.add_number_measurement(attribute, value, name=name)
        sample_out = process.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        selected_property = table[name]
        self.assertEqual(len(selected_property.best_measure), 1)
        measurement_out = selected_property.best_measure[0]
        self.assertEqual(measurement_out.name, name)
        self.assertEqual(measurement_out.attribute, attribute)
        self.assertEqual(measurement_out.otype, otype)
        self.assertEqual(measurement_out.unit, "")
        self.assertEqual(measurement_out.value, value)

    @staticmethod
    def make_properties_dictionary(properties):
        ret = {}
        for the_property in properties:
            name = the_property.name
            ret[name] = the_property
        return ret

# note: all measurement methods funnel through process.set_measurement
#   to process._set_measurement_for_process_samples;
#   it is sufficient to test the above examples!
# ----
# def set_measurement(self, attribute, measurement_data, name=None):
# def add_integer_measurement(self, attrname, value, name=None):
# def add_number_measurement(self, attrname, value, name=None):
# def add_boolean_measurement(self, attrname, value, name=None):
# def add_string_measurement(self, attrname, value, name=None):
# def add_file_measurement(self, attrname, file, name=None):
# def add_sample_measurement(self, attrname, sample, name=None):
# def add_list_measurement(self, attrname, value, value_type, name=None):
# def add_numpy_matrix_measurement(self, attrname, value, name=None):
# def add_selection_measurement(self, attrname, value, name=None):
# def add_vector_measurement(self, attrname, value, name=None):
