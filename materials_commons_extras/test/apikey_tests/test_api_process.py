import unittest
from random import randint
from materials_commons.api import api
from materials_commons.api import Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestApiProcessRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.access_user = "test@test.mc"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        experiment_name = fake_name("TestExperiment-")
        experiment_description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(
            cls.project_id, experiment_name, experiment_description, apikey=cls.apikey)
        cls.experiment_id = experiment_raw['id']
        cls.template_id = Template.create

    def test_create_process_from_template_raw(self):
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        self.assertEqual("process", raw_process['otype'])
        self.assertEqual(self.user, raw_process['owner'])

    def test_push_name_for_process_raw(self):
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']
        process_name = raw_process['name']
        new_process_name = "Renamed-" + process_name
        results = api.push_name_for_process(
            self.project_id, process_id, new_process_name, apikey=self.apikey)
        self.assertEqual("process", results['otype'])
        self.assertEqual(self.user, results['owner'])
        self.assertEqual(new_process_name, results['name'])

    def test_get_project_processes_raw(self):
        # at least one process
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']

        process_list = api.get_project_processes(self.project_id, apikey=self.apikey)
        self.assertIsNotNone(process_list)
        self.assertTrue(len(process_list) > 0)
        found = None
        for process in process_list:
            if process_id == process['id']:
                found = process
        self.assertIsNotNone(found)

    def test_fetch_experiment_processes_raw(self):
        # at least one process
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']

        process_list = api.fetch_experiment_processes(
            self.project_id, self.experiment_id, apikey=self.apikey)
        self.assertIsNotNone(process_list)
        self.assertTrue(len(process_list) > 0)
        found = None
        for process in process_list:
            if process_id == process['id']:
                found = process
        self.assertIsNotNone(found)

    def test_delete_process_raw(self):
        # at least one process
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']

        process_list = api.fetch_experiment_processes(
            self.project_id, self.experiment_id, apikey=self.apikey)
        self.assertIsNotNone(process_list)
        self.assertTrue(len(process_list) > 0)
        found = None
        for process in process_list:
            if process_id == process['id']:
                found = process
        self.assertIsNotNone(found)

        results = api.delete_process(self.project_id, process_id, apikey=self.apikey)
        self.assertEqual(process_id, results['id'])

        process_list = api.fetch_experiment_processes(
            self.project_id, self.experiment_id, apikey=self.apikey)
        self.assertIsNotNone(process_list)
        self.assertTrue(len(process_list) > 0)
        found = None
        for process in process_list:
            if process_id == process['id']:
                found = process
        self.assertIsNone(found)

        process_list = api.get_project_processes(self.project_id, apikey=self.apikey)
        self.assertIsNotNone(process_list)
        self.assertTrue(len(process_list) > 0)
        found = None
        for process in process_list:
            if process_id == process['id']:
                found = process
        self.assertIsNone(found)

    def test_get_process_by_id_raw(self):
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']

        process_raw = api.get_process_by_id(self.project_id, process_id, apikey=self.apikey)
        self.assertIsNotNone(process_raw)
        self.assertEqual('process', process_raw['otype'])
        self.assertEqual(process_id, process_raw['id'])

    def test_get_experiment_process_by_id_raw(self):
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']

        process_raw = api.get_experiment_process_by_id(
            self.project_id, self.experiment_id, process_id, apikey=self.apikey)
        self.assertIsNotNone(process_raw)
        self.assertEqual('process', process_raw['otype'])
        self.assertEqual(process_id, process_raw['id'])

    def test_set_notes_for_process_raw(self):
        raw_process = api.create_process_from_template(
            self.project_id, self.experiment_id, self.template_id, apikey=self.apikey)
        process_id = raw_process['id']

        test_value = "This could be some notes."
        process_raw = api.set_notes_for_process(
            self.project_id, process_id, test_value, apikey=self.apikey)
        self.assertEqual('process', process_raw['otype'])
        self.assertEqual(process_id, process_raw['id'])
        self.assertEqual(test_value, process_raw['description'])
