import unittest
import pytest
from random import randint
from materials_commons.api import create_project, get_all_templates
from .apikey_helper_utils import make_template_table, find_template_id_from_match
from .apikey_helper_utils import _setup_test_filepath1, _get_local_test_dir_path
from .apikey_helper_utils import _get_absolute_path_from_path
from .apikey_helper_utils import FileTestException


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


# Moved from Project
# def get_all_samples(self):
# def fetch_sample_by_id(self, sample_id):
# def get_sample_by_id(self, sample_id):

# Moved from Experiment
# def get_sample_by_id(self, sample_id):
# def get_all_samples(self):
# def decorate_with_samples(self):

class TestSample(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.another_user = "test@test.mc"
        cls.another_apikey = "totally-bogus"
        cls.templates = make_template_table(get_all_templates(apikey=cls.apikey))
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        experiment_name = fake_name("TestApikeyExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(experiment_name, description)
        cls.top_directory = cls.project.get_top_directory()

        cls.create_template = find_template_id_from_match(cls.templates, "Create Sample")
        cls.create_process = cls.experiment.create_process_from_template(cls.create_template)

        cls.samples_names = ["ToDelete", "ToLink", "other"]
        cls.samples = cls.create_process.create_samples(cls.samples_names)

        try:
            cls.file_path = _setup_test_filepath1()
            cls.local_dir_path_for_tests = _get_local_test_dir_path()
            cls.project.local_path = cls.local_dir_path_for_tests
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

        filepath1 = _setup_test_filepath1()
        input_path = _get_absolute_path_from_path(filepath1)
        cls.directory = cls.project.add_directory("/A")

        cls.file_name1 = "testFile1.jpg"
        cls.test_file1 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name1, input_path)

    def test_sample_update_with_detail(self):
        sample = self.samples[1]
        self.assertEqual(0, len(sample.experiments))
        ret_sample = sample.update_with_details()
        self.assertEqual(1, len(ret_sample.experiments))
        self.assertEqual(self.experiment.id, ret_sample.experiments[0].id)

    def test_sample_decoreate(self):
        sample = self.samples[1]
        self.assertEqual(0, len(sample.processes))
        ret_sample = sample.decorate_with_processes()
        self.assertEqual(1, len(ret_sample.processes))
        self.assertEqual(self.create_process.id, ret_sample.processes[0].id)

    @pytest.mark.skip("Delete Sample appears not to work")
    def test_sample_delete(self):
        sample = self.samples[0]
        sample_name = self.samples_names[0]
        self.assertEqual(sample_name, sample.name)
        self.assertEqual(self.user, sample.owner)
        sample_list = self.create_process.get_all_samples()
        found = None
        for s in sample_list:
            if s.id == sample.id:
                found = s
        self.assertIsNotNone(found)
        sample = found

        ret = sample.delete()
        returned_id = ret['id']
        print('')
        print(sample.id, returned_id)

        # sample_list = self.create_process.get_all_samples()
        # found = None
        # for s in sample_list:
        #     if s.id == sample.id:
        #         found = s
        # self.assertIsNone(found)

    def test_samples_link_files(self):
        sample = self.samples[0]
        sample_name = self.samples_names[0]
        self.assertEqual(sample_name, sample.name)
        self.assertEqual(self.user, sample.owner)
        sample_list = self.create_process.get_all_samples()
        found = None
        for s in sample_list:
            if s.id == sample.id:
                found = s
        self.assertIsNotNone(found)
        sample = found
        self.assertEqual(0, len(sample.files))

        file_list = [self.test_file1]
        ret_sample = sample.link_files(file_list)
        self.assertEqual(sample.id, ret_sample.id)
        sample = ret_sample
        self.assertEqual(1, len(sample.files))
        ret_file = sample.files[0]
        self.assertEqual(self.test_file1.id, ret_file.id)

    def test_sample_project_get_all_samples(self):
        samples = self.project.get_all_samples()
        for s in samples:
            self.assertEqual(self.user, s.owner)
            self.assertIn(s.name, self.samples_names)

    def test_sample_project_fetch_sample_by_id(self):
        sample = self.samples[2]
        ret_sample = self.project.fetch_sample_by_id(sample.id)
        self.assertEqual(self.user, ret_sample.owner)
        self.assertEqual(sample.name, ret_sample.name)

    def test_sample_project_get_sample_by_id(self):
        sample = self.samples[2]
        ret_sample = self.project.get_sample_by_id(sample.id)
        self.assertEqual(self.user, ret_sample.owner)
        self.assertEqual(sample.name, ret_sample.name)

    def test_sample_experiment_decorate_with_samples(self):
        self.experiment.decorate_with_samples()
        sample_list = self.experiment.samples
        self.assertEqual(3, len(sample_list))
        for s in sample_list:
            self.assertEqual(self.user, s.owner)
            self.assertIn(s.name, self.samples_names)

    def test_sample_experiment_get_all_samples(self):
        sample_list = self.experiment.get_all_samples()
        self.assertEqual(3, len(sample_list))
        for s in sample_list:
            self.assertEqual(self.user, s.owner)
            self.assertIn(s.name, self.samples_names)

    def test_sample_experiment_get_sample_by_id(self):
        sample = self.samples[2]
        ret_sample = self.experiment.get_sample_by_id(sample.id)
        self.assertEqual(self.user, ret_sample.owner)
        self.assertEqual(sample.name, ret_sample.name)
