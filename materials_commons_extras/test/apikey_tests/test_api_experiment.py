import unittest
import pytest
from random import randint
from materials_commons.api import api


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestApiExperimentRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.access_user = "test@test.mc"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']

    def test_create_experiment_raw(self):
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(self.project_id, name, description, apikey=self.apikey)
        self.assertIsNotNone(experiment_raw)
        self.assertIsNotNone(experiment_raw['owner'])
        self.assertEqual(self.user, experiment_raw['owner'])

    def test_rename_experiment_raw(self):
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(self.project_id, name, description, apikey=self.apikey)
        self.assertIsNotNone(experiment_raw)
        self.assertIsNotNone(experiment_raw['id'])
        experiment_id = experiment_raw['id']
        new_name = "Renamed-" + name
        new_experiment_raw = api.rename_experiment(
            self.project_id, experiment_id, new_name, description, apikey=self.apikey)
        self.assertEqual(experiment_id, new_experiment_raw['id'])
        self.assertEqual(new_name, new_experiment_raw['name'])
        self.assertEqual(self.user, new_experiment_raw['owner'])

    def test_fetch_experiments_raw(self):
        # at lease one experiment
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(self.project_id, name, description, apikey=self.apikey)
        self.assertEqual(self.user, experiment_raw['owner'])
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        self.assertTrue(len(experiment_list) > 0)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_raw['id']:
                found = experiment
        self.assertIsNotNone(found)
        self.assertEqual(self.user, found['owner'])

    def test_delete_experiment_raw(self):
        # at lease one experiment
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(self.project_id, name, description, apikey=self.apikey)
        self.assertEqual(self.user, experiment_raw['owner'])
        experiment_id = experiment_raw['id']
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        self.assertTrue(len(experiment_list) > 0)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_id:
                found = experiment
        self.assertIsNotNone(found)
        self.assertEqual(self.user, found['owner'])

        results = api.delete_experiment(self.project_id, experiment_id, apikey=self.apikey)

        self.assertEqual(experiment_id, results['experiment_id'])
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_id:
                found = experiment
        self.assertIsNone(found)

    def test_delete_experiment_fully(self):
        # at lease one experiment
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(self.project_id, name, description, apikey=self.apikey)
        self.assertEqual(self.user, experiment_raw['owner'])
        experiment_id = experiment_raw['id']
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        self.assertTrue(len(experiment_list) > 0)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_id:
                found = experiment
        self.assertIsNotNone(found)
        self.assertEqual(self.user, found['owner'])

        results = api.delete_experiment_fully(self.project_id, experiment_id, apikey=self.apikey)

        self.assertEqual(experiment_id, results['experiment_id'])
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_id:
                found = experiment
        self.assertIsNone(found)

    @pytest.mark.skip("Delete experiment dry run does not current work - deprecated?")
    def test_delete_experiment_dry_run(self):
        # at lease one experiment
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(self.project_id, name, description, apikey=self.apikey)
        self.assertEqual(self.user, experiment_raw['owner'])
        experiment_id = experiment_raw['id']
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        self.assertTrue(len(experiment_list) > 0)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_id:
                found = experiment
        self.assertIsNotNone(found)
        self.assertEqual(self.user, found['owner'])

        results = api.delete_experiment_dry_run(self.project_id, experiment_id, apikey=self.apikey)

        self.assertEqual(experiment_id, results['experiment_id'])
        experiment_list = api.fetch_experiments(self.project_id, apikey=self.apikey)
        found = None
        for experiment in experiment_list:
            if experiment['id'] == experiment_id:
                found = experiment
        self.assertIsNotNone(found)
