import unittest
from random import randint

from materials_commons.api import create_project, get_all_templates


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestScrap(unittest.TestCase):

    def test_scrap(self):
        project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        project = create_project(project_name, description)
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment = project.create_experiment(name, description)
        template_table = self.make_template_table()
        template = self.template_id_with(template_table,"Single Phase")
        self.assertIsNotNone(template)
        process = experiment.create_process_from_template(template)
        sample_name = "pcs-sample-1"
        sample = process.create_samples(sample_names=[sample_name])[0]
        parameter_attribute = "Domain size (x)"
        parameter_value = 13
        updated_process = process.add_number_measurement(parameter_attribute, parameter_value)
        updated_process.decorate_with_output_samples()
        sample_out = updated_process.output_samples[0]
        self.assertEqual(sample_out.name, sample.name)
        self.assertEqual(sample_name, sample_out.name)
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        property_data = table[parameter_attribute]
        self.assertEqual(len(property_data.best_measure), 1)
        measurement_out = property_data.best_measure[0]
        self.assertEqual(parameter_attribute, measurement_out.name)
        self.assertEqual(parameter_attribute, measurement_out.attribute)
        self.assertEqual(parameter_value, measurement_out.value)

    @staticmethod
    def make_properties_dictionary(properties):
        ret = {}
        for the_property in properties:
            name = the_property.name
            ret[name] = the_property
        return ret

    @staticmethod
    def parse_parameters_file():
        # Starting out this will be a dummy function where I just set the parameters. Later I'll add the file parse_args
        parameter_list = {}
        parameter_list['Domain size (x)'] = 10
        parameter_list['Domain size (y)'] = 20
        parameter_list['Domain size (z)'] = 30
        return parameter_list

    @staticmethod
    def make_template_table():
        template_list = get_all_templates()
        table = {}
        for template in template_list:
            table[template.id] = template
        return table

    @staticmethod
    def template_id_with(table, match):
        found_id = None
        for key in table:
            if match in key:
                found_id = key
        return found_id