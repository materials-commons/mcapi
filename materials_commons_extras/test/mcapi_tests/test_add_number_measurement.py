import unittest
from random import randint
from materials_commons.api import create_project, get_all_templates


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestAddNumberMeasurements(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        template_table = cls.make_template_table()
        template = cls.template_id_with(template_table,"Create Sample")
        cls.template = template
        cls.project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(name, description)
        cls.experiment_id = cls.experiment.id
        if template:
            cls.process = cls.experiment.create_process_from_template(template)
            cls.sample_name = "pcs-sample-1"
            cls.sample = cls.process.create_samples(sample_names=[cls.sample_name])[0]

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.template)
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)
        self.assertIsNotNone(self.process)
        self.assertIsNotNone(self.process.id)
        self.assertIsNotNone(self.process.process_type)
        self.assertEqual(self.process.process_type, 'create')
        self.assertTrue(self.process.does_transform)

        sample = self.sample
        samples = self.process.output_samples
        self.assertIsNotNone(sample)
        self.assertIsNotNone(sample.name)
        self.assertIsNotNone(sample.property_set_id)
        self.assertEqual(sample.name, self.sample_name)
        self.assertEqual(sample.name, samples[0].name)

    def test_add_number_measurement(self):
        self.assertIsNotNone(self.template)
        process = self.process
        parameter_list = self.parse_parameters_file()
        attribute = "Domain size (x)"
        parameter_list[attribute] = 1
        updated_process = process.add_number_measurement(attribute, parameter_list[attribute])
        updated_process.decorate_with_output_samples()
        sample_out = updated_process.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        property_data = table[attribute]
        self.assertEqual(len(property_data.best_measure), 1)
        measurement_out = property_data.best_measure[0]
        self.assertEqual(attribute, measurement_out.name)
        self.assertEqual(attribute, measurement_out.attribute)
        self.assertEqual(1, measurement_out.value)

    def make_properties_dictionary(self, properties):
        ret = {}
        for the_property in properties:
            name = the_property.name
            ret[name] = the_property
        return ret

    def parse_parameters_file(self):
        # Starting out this will be a dummy function where I just set the parameters. Later I'll add the file parse_args
        parameter_list = {}
        parameter_list['Domain size (x)'] = 1
        parameter_list['Domain size (y)'] = 1
        parameter_list['Domain size (z)'] = 1

        return parameter_list

    @staticmethod
    def make_template_table():
        template_list = get_all_templates()
        table = {}
        for template in template_list:
            table[template.id] = template
        return table

    @staticmethod
    def template_id_with(table, match):
        found_id = None
        for key in table:
            if match in key:
                found_id = key
        return found_id