import unittest
from random import randint
from materials_commons.api import create_project, get_all_templates
from materials_commons.api import Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestProcess(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.base_project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.base_project = create_project(cls.base_project_name, description)
        cls.base_project_id = cls.base_project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.base_experiment = cls.base_project.create_experiment(name, description)
        cls.base_experiment_id = cls.base_experiment.id

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.base_project)
        self.assertIsNotNone(self.base_project.name)
        self.assertEqual(self.base_project_name, self.base_project.name)
        self.assertIsNotNone(self.base_project.id)
        self.assertEqual(self.base_project_id, self.base_project.id)
        self.assertIsNotNone(self.base_experiment)
        self.assertIsNotNone(self.base_experiment.id)
        self.assertEqual(self.base_experiment_id, self.base_experiment.id)

    def test_process_from_template_for_create_sample(self):
        process = self.base_experiment.create_process_from_template(Template.create)
        self.assertIsNotNone(process)
        self.assertIsNotNone(process.id)
        self.assertIsNotNone(process.process_type)
        self.assertEqual(process.process_type, 'create')
        self.assertTrue(process.does_transform)

    def test_process_from_template_for_computation(self):
        process = self.base_experiment.create_process_from_template(Template.compute)
        self.assertIsNotNone(process)
        self.assertIsNotNone(process.id)
        self.assertIsNotNone(process.process_type)
        self.assertEqual(process.process_type, 'analysis')
        self.assertFalse(process.does_transform)

    def test_rename_process(self):
        new_name = "Process Test Rename"
        process = self.base_experiment.create_process_from_template(Template.compute)
        undated_process = process.rename(new_name)
        self.assertEqual(undated_process.name, new_name)

    def test_process_from_discovered_template(self):
        template_table = self.make_template_table()
        template_id = self.template_id_with(template_table, 'EPMA')
        process = self.base_experiment.create_process_from_template(template_id)
        process_name = "EPMA Process For Test"
        process = process.rename(process_name)
        self.assertIsNotNone(process)
        self.assertIsNotNone(process.id)
        self.assertIsNotNone(process.process_type)
        self.assertEqual(process.process_type, 'measurement')
        self.assertFalse(process.does_transform)
        self.assertEqual(process.name, process_name)

    def test_process_set_notes_value(self):
        template_table = self.make_template_table()
        template_id = self.template_id_with(template_table, 'EPMA')
        process = self.base_experiment.create_process_from_template(template_id)
        process_name = "EPMA Process For Test"
        process = process.rename(process_name)
        self.assertEqual(process.name, process_name)
        process_notes_value = "An experimental process with notes"
        process_notes_value_expected = "<p>" + process_notes_value + "</p>"
        process = process.set_notes(process_notes_value)
        self.assertEqual(process.description, process_notes_value_expected)
        self.assertEqual(process.notes, process_notes_value_expected)

    def test_process_add_to_notes_value(self):
        template_table = self.make_template_table()
        template_id = self.template_id_with(template_table, 'EPMA')
        process = self.base_experiment.create_process_from_template(template_id)
        process_name = "EPMA Process For Test"
        process = process.rename(process_name)
        self.assertEqual(process.name, process_name)
        process_notes_value = "An experimental process with notes"
        process_notes_value_expected = "<p>" + process_notes_value + "</p>"
        process = process.set_notes(process_notes_value)
        self.assertEqual(process.description, process_notes_value_expected)
        self.assertEqual(process.notes, process_notes_value_expected)
        process = process.add_to_notes(process_notes_value)
        process_notes_value_expected = process_notes_value_expected + "\n" + process_notes_value_expected
        self.assertEqual(process.notes, process_notes_value_expected)

    def make_template_table(self):
        template_list = get_all_templates()
        table = {}
        for template in template_list:
            table[template.id] = template
        return table

    def template_id_with(self, table, match):
        found_id = None
        for key in table:
            if match in key:
                found_id = key
        return found_id
