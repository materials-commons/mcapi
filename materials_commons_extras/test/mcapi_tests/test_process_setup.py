import unittest
from random import randint
from materials_commons.api import create_project
from materials_commons.api import Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestProcessSetup(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.base_project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.base_project = create_project(cls.base_project_name, description)
        cls.base_project_id = cls.base_project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.base_experiment = cls.base_project.create_experiment(name, description)
        cls.base_experiment_id = cls.base_experiment.id
        cls.process_compute = cls.base_experiment.create_process_from_template(Template.compute)

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.base_project)
        self.assertIsNotNone(self.base_project.name)
        self.assertEqual(self.base_project_name, self.base_project.name)
        self.assertIsNotNone(self.base_project.id)
        self.assertEqual(self.base_project_id, self.base_project.id)
        self.assertIsNotNone(self.base_experiment)
        self.assertIsNotNone(self.base_experiment.id)
        self.assertEqual(self.base_experiment_id, self.base_experiment.id)
        self.assertIsNotNone(self.process_compute)
        self.assertIsNotNone(self.process_compute.id)
        self.assertIsNotNone(self.process_compute.process_type)
        self.assertEqual(self.process_compute.process_type, 'analysis')
        self.assertFalse(self.process_compute.does_transform)
        self.assertEqual(len(self.process_compute.setup), 1)
        self.assertEqual(len(self.process_compute.setup[0].properties), 4)
        self.assertEqual(self.process_compute.setup[0].properties[0].otype, 'string')

    def test_units(self):
        dictionary = self.process_compute.get_setup_properties_as_dictionary()
        self.assertEqual(dictionary['memory_per_processor'].units, ['b', 'kb', 'mb', 'gb'])
        self.assertEqual(dictionary['walltime'].units, ['h', 'm', 's'])

    def test_type(self):
        dictionary = self.process_compute.get_setup_properties_as_dictionary()
        self.assertEqual(dictionary['submit_script'].otype, 'string')
        self.assertEqual(dictionary['walltime'].otype, 'number')
        self.assertEqual(dictionary['memory_per_processor'].otype, 'number')
        self.assertEqual(dictionary['number_of_processors'].otype, 'number')

    def test_local_update_number_no_unit_property(self):
        self.process_compute.set_value_of_setup_property('number_of_processors', 5)
        prop = self.process_compute.get_setup_properties_as_dictionary()['number_of_processors']
        self.assertEqual(5, prop.value)

    def test_local_update_number_with_unit_property(self):
        self.process_compute.set_value_of_setup_property('walltime', 12)
        self.process_compute.set_unit_of_setup_property('walltime', 'h')
        prop = self.process_compute.get_setup_properties_as_dictionary()['walltime']
        self.assertEqual(12, prop.value)
        self.assertEqual('h', prop.unit)

    def test_local_update_string_property(self):
        self.process_compute.set_value_of_setup_property('submit_script', "exec.sh")
        prop = self.process_compute.get_setup_properties_as_dictionary()['submit_script']
        self.assertEqual("exec.sh", prop.value)

    def test_remote_update_properties(self):
        self.process_compute.set_value_of_setup_property('number_of_processors', 5)
        self.process_compute.set_value_of_setup_property('walltime', 12)
        self.process_compute.set_unit_of_setup_property('walltime', 'h')
        self.process_compute.set_value_of_setup_property('submit_script', "exec.sh")
        new_process = self.process_compute.update_setup_properties([
            'number_of_processors', 'walltime', 'submit_script'
        ])
        self.assertEqual(self.process_compute.id, new_process.id)
        prop = new_process.get_setup_properties_as_dictionary()['walltime']
        self.assertEqual(prop.value, 12)
        self.assertEqual(prop.unit, 'h')
        prop = new_process.get_setup_properties_as_dictionary()['number_of_processors']
        self.assertEqual(prop.value, 5)
        prop = new_process.get_setup_properties_as_dictionary()['submit_script']
        self.assertEqual(prop.value, "exec.sh")
