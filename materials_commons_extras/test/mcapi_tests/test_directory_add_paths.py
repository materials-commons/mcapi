import unittest
from random import randint
from materials_commons.api import create_project


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestDirectoryAddPaths(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.base_project_name = fake_name("TestDirectoryProject-")
        description = "Test project generated by automated test"
        project = create_project(cls.base_project_name, description)
        cls.base_project_id = project.id
        cls.base_project = project

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.base_project)
        self.assertIsNotNone(self.base_project.name)
        self.assertEqual(self.base_project_name, self.base_project.name)
        self.assertIsNotNone(self.base_project.id)
        self.assertEqual(self.base_project_id, self.base_project.id)

    def test_add_directory_to_project(self):
        testpath = "/A/B/C"
        directory = self.base_project.add_directory(testpath)
        path1 = "/" + directory.name.split("/", 1)[1]
        path2 = testpath
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)
        self.assertIsNotNone(directory._project)
        self.assertEqual(directory._project, self.base_project)

    def test_add_duplicate_directory_to_project(self):
        testpath = "/c/b/a"
        directory = self.base_project.add_directory(testpath)
        path1 = "/" + directory.name.split("/", 1)[1]
        path2 = testpath
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)

        directory = self.base_project.add_directory(testpath)
        path1 = "/" + directory.name.split("/", 1)[1]
        path2 = testpath
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)
