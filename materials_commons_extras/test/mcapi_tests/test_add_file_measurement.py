import unittest
from random import randint
from os import environ
from os import path as os_path
from os.path import getsize
from pathlib import Path as PathClass
from materials_commons.api import create_project, Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestAddFileMeasurements(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(name, description)
        cls.experiment_id = cls.experiment.id
        cls.process = cls.experiment.create_process_from_template(
            Template.primitive_crystal_structure)
        cls.sample_name = "pcs-sample-1"
        cls.sample = cls.process.create_samples(sample_names=[cls.sample_name])[0]
        cls.test_dir_path = "/testDir1/testdir2/testdir3"
        cls.filename = "test.jpg"

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)
        self.assertIsNotNone(self.process)
        self.assertIsNotNone(self.process.id)
        self.assertIsNotNone(self.process.process_type)
        self.assertEqual(self.process.process_type, 'create')
        self.assertTrue(self.process.does_transform)

        sample = self.sample
        samples = self.process.output_samples
        self.assertIsNotNone(sample)
        self.assertIsNotNone(sample.name)
        self.assertIsNotNone(sample.property_set_id)
        self.assertEqual(sample.name, self.sample_name)
        self.assertEqual(sample.name, samples[0].name)

    def test_measurement_file_direct(self):
        self.setup_each_test()
        the_file = self.file

        name = "Measurement File"
        attribute = "file"

        data = {"name": name,
                "attribute": attribute,
                "otype": "file",
                "unit": "",
                "units": [],
                "value": {
                    "file_id": the_file.id,
                    "file_name": the_file.name
                },
                "is_best_measure": True}
        property_data = {
            "name": name,
            "attribute": attribute
        }
        measurement = self.process.create_measurement(data=data)
        process_out = self.process.set_measurements_for_process_samples(
            property_data, [measurement])
        sample_out = process_out.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        property_data = table[name]
        self.assertEqual(len(property_data.best_measure), 1)
        measurement_out = property_data.best_measure[0]
        self.assertEqual(measurement_out.name, name)
        self.assertEqual(measurement_out.attribute, attribute)
        self.assertEqual(measurement_out.otype, "file")
        self.assertEqual(measurement_out.unit, "")
        self.assertEqual(measurement_out.value['file_id'], the_file.id)
        self.assertEqual(measurement_out.value['file_name'], the_file.name)

    def test_measurement_attribute_lattice_system_direct(self):
        self.setup_each_test()
        the_file = self.file
        name = "Measurement File"
        attribute = "file"

        process = self.process
        process = process.add_file_measurement(attribute, the_file, name=name)
        sample_out = process.output_samples[0]
        properties_out = sample_out.properties
        table = self.make_properties_dictionary(properties_out)
        selected_property = table[name]
        self.assertEqual(len(selected_property.best_measure), 1)
        measurement_out = selected_property.best_measure[0]
        self.assertEqual(measurement_out.name, name)
        self.assertEqual(measurement_out.attribute, attribute)
        self.assertEqual(measurement_out.otype, "file")
        self.assertEqual(measurement_out.unit, "")
        self.assertEqual(measurement_out.value['file_id'], the_file.id)
        self.assertEqual(measurement_out.value['file_name'], the_file.name)

    def make_properties_dictionary(self, properties):
        ret = {}
        for the_property in properties:
            name = the_property.name
            ret[name] = the_property
        return ret

    def setup_each_test(self):
        if not hasattr(self, 'filepath'):
            self.filepath = self.make_test_dir_path('fractal.jpg')
            self.test_dir = self.project.add_directory(self.test_dir_path)
            self.file = self.project.add_file_using_directory(
                self.test_dir, self.filename, self.filepath)

            file_path = PathClass(self.filepath)
            self.file_name = file_path.parts[-1]
            input_path = str(file_path.absolute())
            self.byte_count = getsize(input_path)

            self.file = self.project.add_file_using_directory(self.test_dir, self.file_name, input_path)

    def make_test_dir_path(self, file_name):
        self.assertTrue('TEST_DATA_DIR' in environ)
        test_path = os_path.abspath(environ['TEST_DATA_DIR'])
        self.assertIsNotNone(test_path)
        self.assertTrue(os_path.isdir(test_path))
        test_file = os_path.join(test_path, 'test_upload_data', file_name)
        self.assertTrue(os_path.isfile(test_file))
        return test_file
