import unittest
from random import randint
from materials_commons.api import create_project
from .dir_name_utils import DirNameUtils


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestDirectory(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.dir_name_utils = DirNameUtils()

        cls.base_project_name = fake_name("TestDirectoryProject-")
        description = "Test project generated by automated test"
        project = create_project(cls.base_project_name, description)
        cls.base_project_id = project.id
        cls.base_project = project
        cls.test_dir_path = "/TestDir1/TestDir2/TestDir3"
        cls.directory_list = cls.base_project.create_or_get_all_directories_on_path(cls.test_dir_path)
        cls.another_path = "/TestDir1/TestDir2/TestDir4"
        cls.base_project.create_or_get_all_directories_on_path(cls.another_path)

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.base_project)
        self.assertIsNotNone(self.base_project.name)
        self.assertEqual(self.base_project_name, self.base_project.name)
        self.assertIsNotNone(self.base_project.id)
        self.assertEqual(self.base_project_id, self.base_project.id)
        self.assertIsNotNone(self.directory_list)
        last_directory = self.directory_list[-1]
        path1 = "/" + last_directory.name.split("/", 1)[1]
        path2 = self.test_dir_path
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)

    def test_get_all_dirs_from_project(self):
        base = self.base_project_name
        directory_list = self.base_project.get_all_directories()
        if self.dir_name_utils.should_check_default_dirs():
            self.assertEqual(len(directory_list), 5 + self.dir_name_utils.extra_default_dir_count)
            directory_list = self.dir_name_utils.remove_extra_defalut_dirs(directory_list)
        self.assertEqual(len(directory_list), 5)
        self.assertEqual(directory_list[0].name, base)
        self.assertEqual(directory_list[1].name, base + '/TestDir1')
        self.assertEqual(directory_list[2].name, base + '/TestDir1/TestDir2')
        self.assertEqual(directory_list[3].name, base + '/TestDir1/TestDir2/TestDir3')
        self.assertEqual(directory_list[4].name, base + '/TestDir1/TestDir2/TestDir4')

    def test_dirs_by_path(self):
        top_directory = self.base_project.get_top_directory()
        self.assertIsNotNone(top_directory)
        self.assertEqual(top_directory.name, self.base_project.name)

        directory_list = top_directory.get_descendant_list_by_path(self.test_dir_path)
        self.assertIsNotNone(directory_list)
        last_directory = directory_list[-1]
        path1 = "/" + last_directory.path.split("/", 1)[1]
        path2 = self.test_dir_path
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)
