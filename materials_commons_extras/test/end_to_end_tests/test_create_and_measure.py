import unittest
from random import randint

from materials_commons.api import create_project, get_all_templates


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestCreateAndMeasure(unittest.TestCase):

    def test(self):
        self._make_template_table()
        project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        project = create_project(project_name, description)
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        experiment = project.create_experiment(name, description)
        create_sample_template = self._get_template_id_for("Create Sample")
        self.assertIsNotNone(create_sample_template)
        create_sample_process = experiment.create_process_from_template(
            create_sample_template)
        sample_name = "sample-1"
        sample = create_sample_process.create_samples(
            sample_names=[sample_name]
        )[0]

        samples = create_sample_process.output_samples
        self.assertIsNotNone(sample)
        self.assertIsNotNone(sample.name)
        self.assertIsNotNone(sample.property_set_id)
        self.assertEqual(sample.name, sample_name)
        self.assertEqual(sample.name, samples[0].name)
        sample = samples[0]

        measurement_template = self._get_template_id_for("Ultrasonic Fatigue")
        self.assertIsNotNone(measurement_template)
        measurement_process = experiment.create_process_from_template(measurement_template)
        measurement_process.add_input_samples_to_process([sample])

        process = measurement_process

        attribute = "label"
        value = "booloo ball"
        name = "Gingle Snit"
        otype = "string"

        measurement_data = {
            "name": name,
            "attribute": attribute,
            "otype": otype,
            "value": value,
            "unit": '',
            "is_best_measure": True
        }

        measurement = process.create_measurement(data=measurement_data)
        print(" ++ measurement", measurement.id, measurement.attribute, measurement.value, measurement.unit)
        measurement_property = {
            "name": name,
            "attribute": attribute
        }
        process.set_measurements_for_process_samples(measurement_property, [measurement])


    @staticmethod
    def make_properties_dictionary(properties):
        ret = {}
        for the_property in properties:
            name = the_property.name
            ret[name] = the_property
        return ret

    def _make_template_table(self):
        template_list = get_all_templates()
        table = {}
        for template in template_list:
            table[template.id] = template
        self.template_table = table

    def _get_template_id_for(self, match):
        found_id = None
        for key in self.template_table:
            if match in key:
                found_id = key
        return found_id