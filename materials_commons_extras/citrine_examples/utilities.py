import os
import materials_commons.api as mcapi
import tempfile
from random import randint


def check_api_keys():
    # potentially, get both error messages
    key = check_citrination_key()
    config = check_materials_commons_config()
    return key and config


def check_data_samples_dir():
    directory = get_data_samples_dir()
    if directory and os.path.isdir(directory):
        return True
    elif directory:
        direction = str(directory)
        print("The supplied SAMPLES_DIRECTORY, " + directory + ", is not a directory")
        return False
    else:
        print("The environment variable SAMPLES_DIRECTORY must be set to a directory path")
        return False


def check_citrination_key():
    if get_citrination_key():
        return True
    else:
        print("The environment variable CITRINATION_API_KEY must be assigned to the user's API key")
        return False


def check_materials_commons_config():
    config = mcapi.Config()
    if config.params and config.mcurl and config.params['apikey']:
        return True
    else:
        print("The Materials Commons configuration ~/.materialscommons/config.json is not set up")
        return False


def get_citrination_key():
    return os.getenv('CITRINATION_API_KEY', '')


def get_data_samples_dir():
    return os.getenv('SAMPLES_DIRECTORY', '')


def setup_data(test_file_or_dir_path):
    base = get_data_samples_dir()
    filepath = os.path.join(base, test_file_or_dir_path)

    type = "unknown"
    if os.path.isfile(filepath):
        type = "file"
    if os.path.isdir(filepath):
        type = "directory"
    if type == 'unknown':
        print(filepath)
        print("The proposed example data file or directory is not either; can not continue")
        exit(1)

    return type, filepath


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


def create_test_project():
    name = fake_name("TestProject-")
    description = "Test project generated by automated test"
    project = mcapi.create_project(name, description)
    return project


def print_mc_file_or_dir(obj):
    print("    " + obj.otype + ", name = " + obj.name + ", id = " + obj.id)


def get_temp_dir():
    return tempfile.mkdtemp()


def path_to_temp_file(dir, name):
    return os.path.join(dir, name)
