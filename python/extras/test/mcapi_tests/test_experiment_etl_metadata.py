import unittest
import pytest
from random import randint
from materials_commons.api import create_experiment_metadata, get_experiment_metadata_by_id
from materials_commons.api import get_experiment_metadata_by_experiment_id
from materials_commons.api import create_project


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


testUserId = "test@test.mc"


class TestExperimentEtlMetadata(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.base_project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.base_project = create_project(cls.base_project_name, description)
        cls.base_project_id = cls.base_project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.base_experiment = cls.base_project.create_experiment(name, description)
        cls.base_experiment_id = cls.base_experiment.id

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.base_project)
        self.assertIsNotNone(self.base_project.name)
        self.assertEqual(self.base_project_name, self.base_project.name)
        self.assertIsNotNone(self.base_project.id)
        self.assertEqual(self.base_project_id, self.base_project.id)
        self.assertIsNotNone(self.base_experiment)
        self.assertIsNotNone(self.base_experiment.id)
        self.assertEqual(self.base_experiment_id, self.base_experiment.id)

    @pytest.mark.skip("No Implements - TODO")
    def test_basic_metadata_properties(self):
        # TODO - Implement this test!
        pass

    def test_create_metadata(self):
        fake_metadata = _make_reasonable_metadata()
        self.assertIsNotNone(fake_metadata)
        experiment_id = self.base_experiment_id
        json = fake_metadata
        metadata_record = create_experiment_metadata(experiment_id, json)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        self.assertEqual(metadata_record.owner, testUserId)

    def test_get_metadata_by_id(self):
        fake_metadata = _make_reasonable_metadata()
        self.assertIsNotNone(fake_metadata)
        experiment_id = self.base_experiment_id
        json = fake_metadata
        metadata_record = create_experiment_metadata(experiment_id, json)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        metadata_id = metadata_record.id
        self.assertIsNotNone(metadata_id)
        metadata_record = get_experiment_metadata_by_id(metadata_id)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        self.assertEqual(metadata_record.id, metadata_id)

    def test_get_metadata_by_id_fails(self):
        metadata_id = "This is not a valid id"
        metadata_record = get_experiment_metadata_by_id(metadata_id)

    def test_get_metadata_by_id(self):
        fake_metadata = _make_reasonable_metadata()
        self.assertIsNotNone(fake_metadata)
        experiment_id = self.base_experiment_id
        json = fake_metadata
        metadata_record = create_experiment_metadata(experiment_id, json)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        metadata_id = metadata_record.id
        self.assertIsNotNone(metadata_id)
        metadata_record = get_experiment_metadata_by_experiment_id(experiment_id)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        self.assertEqual(metadata_record.id, metadata_id)

    def test_update_metadata(self):
        fake_metadata = _make_reasonable_metadata()
        self.assertIsNotNone(fake_metadata)
        experiment_id = self.base_experiment_id
        json = fake_metadata
        metadata_record = create_experiment_metadata(experiment_id, json)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        metadata_id = metadata_record.id
        self.assertIsNotNone(metadata_id)
        original_path = "/Users/weymouth/Desktop/test/data"
        altered_path = "/Users/weymouth/Desktop/test/alternate_data"
        self.assertEqual(metadata_record.json["input_data_dir_path"],original_path)
        altered_metadata = _make_reasonable_metadata()
        altered_metadata["input_data_dir_path"] = altered_path
        updated_record = metadata_record.update(altered_metadata)
        self.assertIsNotNone(updated_record)
        self.assertIsNotNone(updated_record.experiment_id)
        self.assertEqual(updated_record.experiment_id, experiment_id)
        self.assertEqual(updated_record.id, metadata_id)
        self.assertEqual(updated_record, metadata_record)
        self.assertEqual(metadata_record.json["input_data_dir_path"],altered_path)

    def test_delete_metadata(self):
        fake_metadata = _make_reasonable_metadata()
        self.assertIsNotNone(fake_metadata)
        experiment_id = self.base_experiment_id
        json = fake_metadata
        metadata_record = create_experiment_metadata(experiment_id, json)
        self.assertIsNotNone(metadata_record)
        self.assertIsNotNone(metadata_record.experiment_id)
        self.assertEqual(metadata_record.experiment_id, experiment_id)
        metadata_id = metadata_record.id
        self.assertIsNotNone(metadata_id)
        success = metadata_record.delete()
        self.assertTrue(success)
        metadata_record = get_experiment_metadata_by_id(metadata_id)
        self.assertIsNone(metadata_record)

def _make_reasonable_metadata():
    return {
          "time_stamp": "Thu Feb  8 08:36:34 2018",
          "process_metadata": [
            {
              "id": "8da4f353-9076-4796-a51e-7c521772ae51",
              "name": "Create Samples",
              "template": "global_Create Samples",
              "start_row": 5,
              "end_row": 6,
              "start_col": 1,
              "end_col": 2
            },
            {
              "id": "22b1aaaf-2076-44e1-9ace-8d7fe9791c94",
              "name": "Create Samples",
              "template": "global_Create Samples",
              "start_row": 6,
              "end_row": 7,
              "start_col": 1,
              "end_col": 2
            },
            {
              "id": "7f2fb980-809c-4486-95e3-8ec452bfa751",
              "name": "Create Samples",
              "template": "global_Create Samples",
              "start_row": 7,
              "end_row": 8,
              "start_col": 1,
              "end_col": 2
            },
            {
              "id": "92417fe4-1aa4-4494-8967-13f8cc4f6025",
              "name": "Create Samples",
              "template": "global_Create Samples",
              "start_row": 8,
              "end_row": 9,
              "start_col": 1,
              "end_col": 2
            },
            {
              "id": "d7c0f921-6695-4e17-b02e-f5eb37345677",
              "name": "Preperation 1",
              "template": "global_Heat Treatment",
              "start_row": 5,
              "end_row": 6,
              "start_col": 2,
              "end_col": 5
            },
            {
              "id": "566ac438-c2a0-4b31-a9aa-c59c548082df",
              "name": "Preperation 1",
              "template": "global_Heat Treatment",
              "start_row": 6,
              "end_row": 7,
              "start_col": 2,
              "end_col": 5
            },
            {
              "id": "687d94be-5fd7-4fd0-97d7-e61275897131",
              "name": "Preperation 1",
              "template": "global_Heat Treatment",
              "start_row": 7,
              "end_row": 8,
              "start_col": 2,
              "end_col": 5
            },
            {
              "id": "9335c438-650a-4de6-afc0-02e2f0048965",
              "name": "Preperation 1",
              "template": "global_Heat Treatment",
              "start_row": 8,
              "end_row": 9,
              "start_col": 2,
              "end_col": 5
            }
          ],
          "input_excel_file_path": "/Users/weymouth/Desktop/test/short.xlsx",
          "input_data_dir_path": "/Users/weymouth/Desktop/test/data",
          "output_json_file_path": "/Users/weymouth/Desktop/test/metadata.json",
          "project_id": "8197c346-dfdf-4160-8fd1-677f0c8d2d0f",
          "experiment_id": "9fa0dc7e-c503-41a5-8f0b-e5884ec8ae0f",
          "header_row_end": 5,
          "data_row_start": 5,
          "data_row_end": 9,
          "data_col_start": 1,
          "data_col_end": 5,
          "start_attribute_row": 1,
          "sheet_headers": [
            [
              "PROJ: Generic Testing",
              "PROC: Create Samples",
              "PROC: Heat Treatment",
              None,
              None
            ],
            [
              "EXP: Test1",
              "SAMPLES",
              "PARAM",
              "PARAM",
              "FILES"
            ],
            [
              None,
              None,
              "Temperature (C)",
              "Time (h)",
              None
            ],
            [
              "NAME",
              None,
              "Preperation 1",
              None,
              None
            ],
            [
              "LABEL",
              "Sample Name",
              "Temp (\u00baC)",
              "Time (hr)",
              None
            ]
          ],
          "project": None,
          "experiment": None,
          "process_table": None
        }