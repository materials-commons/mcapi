import unittest
from random import randint
from os import environ
from os import path as os_path
from os.path import getsize
from pathlib import Path
from mcapi import set_remote_config_url, get_remote_config_url, create_project
from mcapi import Template, get_all_templates

url = 'http://mctest.localhost/api'


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestFileProcessSample(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        set_remote_config_url(url)
        cls.project_name = fake_name("TestMeasurementEPMASetupProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        name = "TestMeasurementEPMASetup"
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(name, description)
        cls.experiment_id = cls.experiment.id
        cls.process = cls.experiment.create_process_from_template(Template.create)
        cls.sample_name = "setup-sample-1"
        cls.samples = cls.process.create_samples(sample_names=[cls.sample_name])
        cls.sample = cls.samples[0]
        cls.helper = TestFileProcessSampleHelper()
        cls.helper.setup_test_file()
        cls.filepath = cls.helper.filepath
        project = cls.project
        directory = project.get_top_directory()

        path = Path(cls.filepath)
        file_name = path.parts[-1]
        input_path = str(path.absolute())
        cls.byte_count = getsize(input_path)
        cls.file = project.add_file_using_directory(directory, file_name, input_path)
        cls.measurement_process_name = "EPMA Process For Test"
        epma_process = cls.helper.create_measurement_process(cls.experiment)
        epma_process.rename(cls.measurement_process_name)
        epma_process.add_input_samples_to_process([cls.sample])
        epma_process.add_files([cls.file])
        cls.measurement_process = epma_process

    def test_is_setup_correctly(self):
        print ""
        print self.project.name
        self.assertTrue('TEST_DATA_DIR' in environ)
        self.assertIsNotNone(self.helper.test_path)
        self.assertTrue(os_path.isdir(self.helper.test_path))
        self.assertTrue(os_path.isfile(self.helper.filepath))

        self.assertEqual(get_remote_config_url(), url)

        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)
        self.assertIsNotNone(self.process)
        self.assertIsNotNone(self.process.id)
        self.assertIsNotNone(self.process.process_type)
        self.assertEqual(self.process.process_type, 'create')
        self.assertTrue(self.process.does_transform)

        sample = self.sample
        self.assertIsNotNone(sample)
        self.assertIsNotNone(sample.name)
        self.assertIsNotNone(sample.property_set_id)
        self.assertEqual(sample.name, self.sample_name)

        measurement_process = self.measurement_process
        self.assertIsNotNone(measurement_process)
        self.assertIsNotNone(measurement_process.name)
        self.assertIsNotNone(measurement_process.process_type)
        self.assertEqual(measurement_process.process_type, 'measurement')
        self.assertFalse(measurement_process.does_transform)

        self.assertIsNotNone(self.file)
        self.assertEqual(self.file.size, self.byte_count)

    def test_link_file_to_sample(self):
        project = self.project
        experiment = self.experiment
        sample = self.sample
        updated_sample = sample.link_files([self.file])
        self.assertEqual(updated_sample.id, sample.id)
        self.assertEqual(updated_sample.project.id, sample.project.id)
        self.assertEqual(updated_sample.experiment.id, sample.experiment.id)
        self.assertEqual(updated_sample.files[0].id, self.file.id)


class TestFileProcessSampleHelper():
    def setup_test_file(self):
        filename = 'fractal.jpg'
        self.test_path = os_path.abspath(environ['TEST_DATA_DIR'])
        self.filepath = os_path.join(self.test_path, 'test_upload_data', filename)

    def create_measurement_process(self, experiment):
        template_table = self.make_template_table()
        template_id = self.template_id_with(template_table, 'EPMA')
        epma_process = experiment.create_process_from_template(template_id)
        return epma_process

    def make_template_table(self):
        template_list = get_all_templates()
        table = {}
        for template in template_list:
            table[template.id] = template
        return table

    def template_id_with(self, table, match):
        found_id = None
        for key in table:
            if match in key:
                found_id = key
        return found_id
